@using Masuit.Tools.Hardware
@using Masuit.Tools.Win32
@using System.Net.Sockets
@using Masuit.MyBlogs.Core.Common
@using Masuit.Tools
@inject IJSRuntime JS;

<h3 class="text-center">
    服务器系统信息概览
</h3>
<table class="table table-inner table-vmiddle table-bordered">
    <tbody>
        <tr>
            <td>网站开机时长</td>
            <th>@runningTime</th>
            <td>服务器开机时长</td>
            <th>@bootTime</th>
            <td>操作系统</td>
            <th>@Windows.GetOsVersion()</th>
        </tr>
        <tr>
            <td>CPU型号</td>
            <th>@cpu.Type</th>
            <td>CPU基础频率</td>
            <th>@cpu.CurrentClockSpeed MHz</th>
            <td>CPU睿频</td>
            <th>@cpu.MaxClockSpeed MHz</th>
        </tr>
        <tr>
            <td>CPU个数</td>
            <th>@SystemInfo.GetCpuInfo().Count 插槽</th>
            <td>CPU核心数</td>
            <th>@cpu.NumberOfCores 核心</th>
            <td>CPU线程数</td>
            <th>@cpu.NumberOfLogicalProcessors 线程</th>
        </tr>
        <tr>
            <td>物理总内存</td>
            <th>@((memory.PhysicalMemory / 1048576).ToString("N2")) MB(@((memory.PhysicalMemory / 1073741824).ToString("N2")) GB)</th>
            <td>物理内存已使用</td>
            <th>@((memory.PhysicalMemory * memory.MemoryUsage / 104857600).ToString("N2")) MB(@((memory.PhysicalMemory * memory.MemoryUsage / 107374182400).ToString("N2")) GB)</th>
            <td>物理内存剩余</td>
            <th>@((memory.PhysicalMemory * (100 - memory.MemoryUsage) / 104857600).ToString("N2")) MB(@((memory.PhysicalMemory * (100 - memory.MemoryUsage) / 107374182400).ToString("N2")) GB)</th>
        </tr>
        <tr>
            <td>虚拟内存总数</td>
            <th>@((memory.TotalPageFile / 1048576).ToString("N2")) MB</th>
            <td>虚拟内存已使用</td>
            <th>@(((memory.TotalPageFile - memory.AvailablePageFile) / 1048576).ToString("N2")) MB</th>
            <td>虚拟内存可用</td>
            <th>@((memory.AvailablePageFile / 1048576).ToString("N2")) MB</th>
        </tr>
        <tr>
            <td>磁盘总空间</td>
            <th>@SystemInfo.DiskTotalSpace().Select(kv => kv.Key + kv.Value).Join(" | ")</th>
            <td>磁盘剩余空间</td>
            <th>@SystemInfo.DiskFree().Select(kv => kv.Key + kv.Value).Join(" | ")</th>
            <td>磁盘使用率</td>
            <th>@SystemInfo.DiskUsage().Select(kv => kv.Key + kv.Value.ToString("P")).Join(" | ")</th>
        </tr>
        <tr>
            <td>MAC地址</td>
            <th colspan="5">@macs.Join(" , ")</th>
        </tr>
        <tr>
            <td>IP地址</td>
            <th colspan="5">@ips.Join(" , ")</th>
        </tr>
    </tbody>
</table>
    <button class="btn btn-success" @onclick="ClearMemory">整理内存</button>
<div>
    <div class="page-header">
        <h3 class="text-center">性能实时监控</h3>
    </div>
    <div class="row">
        <div id="container" class="col-md-3" style="height: 400px;"></div>
        <div id="container-cpu" class="col-md-5" style="height: 400px;"></div>
        <div id="container-io" class="col-md-4" style="height: 400px;"></div>
    </div>
</div>

@code {
    private string bootTime;
    private string runningTime;
    private readonly CpuInfo cpu = SystemInfo.GetCpuInfo()[0];
    private readonly RamInfo memory = SystemInfo.GetRamInfo();
    private readonly IList<string> macs = SystemInfo.GetMacAddress();
    private readonly IList<string> ips = SystemInfo.GetLocalIPs().OrderBy(u => u.Address.AddressFamily != AddressFamily.InterNetwork).Select(a => a.Address.ToString()).ToList();

    protected override void OnInitialized()
    {
        var boot = DateTime.Now - SystemInfo.BootTime();
        var span = DateTime.Now - PerfCounter.StartTime;
        runningTime = $"{span.Days}天{span.Hours}小时{span.Minutes}分钟";
        bootTime = $"{boot.Days}天{boot.Hours}小时{boot.Minutes}分钟";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("showLine");
    }

    [JSInvokable]
    public static PerfCounter.PerformanceCounter GetCurrentPerformanceCounter()
    {
        return PerfCounter.GetCurrentPerformanceCounter();
    }

    public void ClearMemory()
    {
        Windows.ClearMemorySilent();
        JS.InvokeVoidAsync("showSuccess");
    }
}